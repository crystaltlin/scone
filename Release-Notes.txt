Release Notes for the Scone Knowledge-Base System
Author: Scott E. Fahlman <sef@cs.cmu.edu>
===========================================================================
User-visible changes since v1.0.0:
===========================================================================
Eliminated all the "simple" prefixes in the core-components files,
and updated the core.lisp file to load the new names.  Some of these
files are indeed very minimal, but I don't want to be thinking about
how complex they have to be before we drop the "simple".  If some
files ultimately have a simple "core" version and a more complex
version for some class of applications, we can worry about appropriate
naming then.

Moved some upper-ontology stuff (e.g. the definition of {event}) from
episodic.lisp to upper-lisp, since other things will need to see these
elements.

Began consolidating some of Laleh's KB stuff from the
vehicle-maintenance domain into a new directory that is not (for now)
part of "core".  Began consolidating episodic stuff from Laleh and
Maria into episodic.lisp, and began adding some of my own
augmentations.

Remove *kb-logging-stream* and the functionality that supports it.
This continuous-logging facility was added during the RADAR project on
the theory that it made a continuously-learning system more robust
than occasional checkpointing.  But to the best of my knowledge it has
never been used, and keeping it all consistent has been a big extra
drag on engine development.

Modified IS-X-A-Y? and IS-X-EQ-Y? to return the proper second values,
as documented in the Scone User's Guide.  That is, if the answer is
:NO due to a violated split or an explicit NOT-EQ link, return that
split or link as the second value.  This is the item you should cancel
if you want to force the answer to be :YES.

NOTE: There's a known bug here.  It appears that NOT-EQ links are not placing
negation markers correctly.  This will be fixed soon.  I think that
IS-NOT-A negation is now working as intended.
=======================================
June 27, 2017

Some old changes from late 2016, not committed until now:

Small update to add :SPLIT argument to INCOMING-WIRES.

Change to add optional MARK-LINK arg to CROSS-REL, MARK-REL-INTERNAL,
MARK-REL-DESCRIPTION.
---------------------------------
New changes:

MARK-REL and MARK-REL-INVERSE (and the things that call them,
including the SHOW and LIST versions and STATEMENT-TRUE?) have now
been modified to handle transitive relations/statements properly.

The changes were mostly in the MARK-REL-INTERNAL function.  This now
follows chains of transitive statements and also handles transitive
statements inherited from above, within the limits set by the
RECURSION-ALLOWANCE arg.  So if, in a {family}, the mother is older
than any child, then this will be inherited by the mother and children
in any specific family, and that can be part of an older-than chain.

I'm pushing this out now as the "development" version because one
group of students needs this capability ASAP for a project they are
working on.  But this facility needs some further testing and the
documents need to be updated.

There is one known (but minor) bug in the way that forward and inverse
English names are assigned. Also, transitivity is not yet implemented
for roles, just for Scone relations/statements.

Also, there probably are more efficient ways to implement this if
that ever becomes a priority. (It will be a priority for the
transitive is-part-of relation, but in the near future that will
become a built-in link type with its own machinery, as we have done
with is-a links.
==========================================
June 29, 2017

Made a change in NEW-INDV and NEW-TYPE, requested by Daniel Gross, to
check whether an element with a give iname actually exists before
comparing to *undefined-thing*.  This was not a problem in SBCL, but
tripped up in LispWorks.

Changed all instances in the engine of :UTF8 to :UTF-8, which is
apparently the form that most CL implmenetations recognize.

===========================================
July 1, 2017

Added MARK-SPLIT-VIOLATIONS to check whether an existing or proposed
split S has violations under it in the current context -- that is,
some element S is under more than one of the branches of the split S.
If so, mark them and return the count.

Also, MARK-ALL-SPLIT-VIOLATIONS calls MARK-SPLIT-VIOLATIONS on every
split present in the current context, testing them all for violations.

Modified NEW-SPLIT and NEW-COMPLETE-SPLIT to use these if necessary.

Added LIST and SHOW versions of the two MARK-functions above.

There are various ways in which these functions could be speeded up.
However, we normally check for split violations incrementally, when
new is-a links are added to the network. The problem arises when we
already have populated the various type-nodes being split with
subtypes and instances and then add the split later -- then we need to
check if this is OK.

Note that this does not come up in the common Scone idiom of using
NEW-SPLIT-SUBTYPES to create new types and a split, all in the same
operation. We need this now because some programs that convert
existing KBs into Scone, for example from OWL, scrmable up the order
in which things are done.

============================================



